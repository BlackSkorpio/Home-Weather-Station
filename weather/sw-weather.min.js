/*! Home Weather Station serviceWorker sw-weather.js
 *  Copyright  (c) 2015-2019 Bjarne Varoystrand - bjarne ○ kokensupport • com
 *  License: MIT
 *  @author Bjarne Varoystrand (@black_skorpio)
 *  @version 1.0.0
 *  @description Forked from the ShearSpire Media Weather Clock by Steven Estrella (https://www.shearspiremedia.com)
 *               First introduced here: https://css-tricks.com/how-i-built-a-gps-powered-weather-clock-with-my-old-iphone-4/
 *  http://varoystrand.se | http://kokensupport.com
**/
var DEVCONSOLE=location.hostname=="oxygen.local";if("serviceWorker" in navigator){window.addEventListener("load",function(){navigator.serviceWorker.register("sw-weather.min.js").then(function(a){if(DEVCONSOLE){console.log("[register] Service Worker registration successful",a)}},function(a){if(DEVCONSOLE){console.log("[register] Registration failed",registration)}})});navigator.serviceWorker.addEventListener("controllerchange",function(a){if(DEVCONSOLE){console.log('[controllerchange] A "controllerchange" event has happened within navigator.serviceWorker: ',a)}navigator.serviceWorker.controller.addEventListener("statechange",function(){if(DEVCONSOLE){console.log('[controllerchange][statechange] A "statechange" has occured: ',this.state)}if(this.state==="activated"){if(DEVCONSOLE){console.log("[controllerchange][statechange][activated] WHS is ready to go offline")}document.getElementById("offlineNotification").classList.remove("hidden")}})})}var CACHE_NAME="hws-weather";var urls_to_cache=["/weather/","css/weather.min.css","img/sprite.svg","img/window-day.jpg","img/window-night.jpg","js/weather.min.js"];self.addEventListener("install",function(a){a.waitUntil(caches.open(CACHE_NAME).then(function(b){if(DEVCONSOLE){console.log("[install] Caches opened, adding all core components to cache")}return b.addAll(urls_to_cache)}).then(function(){if(DEVCONSOLE){console.log("[install] All required resources have been cached, we're good!")}return self.skipWaiting()}))});self.addEventListener("fetch",function(a){a.respondWith(caches.match(a.request).then(function(b){if(b){if(DEVCONSOLE){console.log("[fetch] Returning from ServiceWorker cache: ",a.request.url)}return b}return fetch(a.request).then(function(d){if(DEVCONSOLE){console.log("[fetch] Returning from server: ",a.request.url)}if(!d||d.status!==200||d.type!=="basic"){return d}var c=d.clone();caches.open(CACHE_NAME).then(function(e){e.put(a.request,c)});return d})}))});self.addEventListener("activate",function(a){if(DEVCONSOLE){console.log("[activate] Activating ServiceWorker!")}if(DEVCONSOLE){console.log("[activate] Claiming this ServiceWorker!")}a.waitUntil(self.clients.claim())});